/**
 * Copyright (c) Openizr. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

%table-placeholder {
  left: 0;
  display: flex;
  position: sticky;
  justify-content: center;
  padding: var(--gaps-7) 0;
}

.table {
  max-width: 100%;
  overflow: hidden;
  min-height: 20rem;
  @include extend(flex flex-auto);
  border-radius: var(--shp-default);
  border: 1px solid var(--clr-greys-800);

  &__headers__column,
  &__values__column__cell,
  &__actions__column__header {
    padding: var(--gaps-3);
  }

  &__headers__column:empty,
  &__values__row__cell:empty {
    @include extend(none);
  }

  table {
    // `display: table` does not handle scrolling on overflow well.
    display: block;
    overflow: auto;
    white-space: nowrap;
    border-spacing: 0;

    tr:nth-child(even) {
      td:last-child {
        background: var(--clr-secondary-900);
      }
    }

    th,
    td {
      width: 100%;
    }

    td {
      padding: var(--gaps-1) var(--gaps-3);
    }
  }

  &__headers__column {
    cursor: default;
    position: relative;
    user-select: none;
    border-bottom: 1px solid var(--clr-greys-800);

    @include modifiers(sortable) {
      cursor: pointer;
      font-weight: 500;
      &:hover,
      &:focus,
      &:focus-visible {
        text-decoration: underline;
      }
    }

    @include modifiers(ascending) {
      &:after {
        content: 'ðŸ”¼';
        margin-left: var(--gaps-3);
      }
    }

    @include modifiers(descending) {
      &:after {
        content: 'ðŸ”½';
        margin-left: var(--gaps-3);
      }
    }
  }

  &__values {
    max-width: 100%;
    text-align: center;
    overflow-x: overlay;

    tr {
      cursor: pointer;
      transition: all 250ms;
    }

    tr:nth-child(even) {
      background: var(--clr-secondary-900);
    }

    tr:hover,
    tr:hover td:last-child,
    tr:nth-child(even):hover td:last-child {
      background: var(--clr-primary-900);
    }
  }

  &__loading,
  &__no-result {
    display: none;
  }

  // Displays or hides loading placeholder depending on the state.
  @include modifiers(loading) {
    overflow: auto;
    @include extend(flex-col);
  }

  @include modifiers(loading, &) {
    &__values {
      overflow: initial;
    }

    &__loading {
      @extend %table-placeholder;
    }
  }

  // Displays or hides no result placeholder depending on the state.
  @include modifiers(no-result) {
    overflow: auto;
    @include extend(flex-col);
  }

  @include modifiers(no-result, &) {
    &__values {
      overflow: initial;
    }

    &__no-result {
      @extend %table-placeholder;
    }
  }
}
